
import java.io.File


fun main(args: Array<String>) {
    val test: List<String> = listOf(
            "rect 2x2",
        "rotate row y=1 by 2",
            "rotate column x=0 by 1"
    )
    val input: List<String> = File("src/advent_8.txt").readLines().filter { it.isNotBlank() }
    var listListsPoints: MutableList<MutableList<MyPoint>> = mutableListOf()

    for (y in 0..5) {
        listListsPoints.add(mutableListOf())

        for (x in 0..49) {
            listListsPoints[y].add(MyPoint(x, y, false))
        }
    }


    var newListListsPoints: MutableList<MutableList<MyPoint>> = mutableListOf()

    for (y in 0..5) {
        newListListsPoints.add(mutableListOf())

        for (x in 0..49) {
            newListListsPoints[y].add(MyPoint(x, y, false))
        }
    }
    fun action(string: String) {
        if (string.startsWith("rect")) {
            val x = string.substring(5, 6).toInt()
            val y = string.takeLast(1).toInt()
                for (y in 0..y-1){
                    listListsPoints[y].map { if (it.x in 0..x-1) it.vkl =true }
                }
        }
        else if (string.startsWith("rotate row")){
            val y = string.substring(13, 14).toInt()
            val distance = string.takeLast(2).trim().toInt()

            for (x in 0..49){
                if (x-distance >= 0) {
                    newListListsPoints[y][x].vkl = listListsPoints[y][x - distance].vkl
                }
                else newListListsPoints[y][x].vkl = listListsPoints[y][50 + (x - distance)].vkl
            }
            listListsPoints[y] = newListListsPoints [y]
            newListListsPoints[y].map { it.vkl = false }

        }
        else if (string.startsWith("rotate column")){
            val column = string.substring(16, 18).trim().toInt()
            val distance = string.takeLast(2).trim().toInt()%6
            for (y in 0..5){
                if (y - distance >= 0)
                 newListListsPoints[y][column].vkl =  listListsPoints[y-distance][column].vkl
                else newListListsPoints[y][column].vkl =  listListsPoints[6+(y-distance)][column].vkl
            }
            for (y in 0..5) {
                listListsPoints[y][column] = newListListsPoints[y][column]
                newListListsPoints[y].map { it.vkl = false }
            }
        }
    }

    for (string in test){
        action(string)
    }
    for (list in listListsPoints){
        println(list.filter { it.vkl })
    }
    println(listListsPoints.sumBy { it.count{ it.vkl} })
}
